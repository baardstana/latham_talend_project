package routines;

import java.util.Date;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class CustomStringHandling {

    /**
     * replaceNullAndBlank: returns "Unknown" if the string is either null or the trimmed string = ""
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("str") input: The string to be handled.
     * 
     * {example} replaceNullAndBlank("    ") # Unknown
     */
    public static String replaceNullAndBlank(String str) {
        return (str == null || "".equals(TalendString.talendTrim(str,' ',0))) ? "Unknown" : TalendString.talendTrim(str,' ',0);
    }
    
    public static String replaceNullAndBlank(Integer i) {
        return (i == null ) ? "Unknown" : i.toString();
    }    
    /**
     * replaceNullAndBlankCoalesce: returns "Unknown" if the coalesced string is either null or the trimmed string = ""
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("str") input: The string to be handled.
     * {param} string("str2") input: The second string to be handled.
     * 
     * {example} replaceNullAndBlankCoalesce("    ", "") # Unknown
     */    
    public static String replaceNullAndBlankCoalesce(String str, String str2) {
        return (str == null || "".equals(TalendString.talendTrim(str,' ',0)) || "Unknown".equals(TalendString.talendTrim(str,' ',0))) ? 
        	(str2 == null || "".equals(TalendString.talendTrim(str2,' ',0))) ?
        	"Unknown" : TalendString.talendTrim(str2,' ',0) : TalendString.talendTrim(str,' ',0);
    }
    
    /**
     * transformS21dateToKey: transforms System 21 dates (cyyMMdd) to date key (yyyyMMdd)
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} float("S21Date") input: The date to transform.
     * 
     * {example} transformS21dateToKey(1160104) # 20160104
     */
    public static int transformS21dateToKey(Float S21Date) {
        return (S21Date == null || S21Date == 0) ? 99990101 : (int) Math.round(S21Date) + 19000000;
    }    
    
    /**
     * transformDateToKey: transforms dates to date key (yyyyMMdd)
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} float("dateToTransform") input: The date to transform.
     * 
     * {example} transformDateToKey('2016-03-02') # 20160302
     */
    public static int transformDateToKey(Date dateToTransform) {
        return (dateToTransform == null || TalendDate.getPartOfDate("YEAR",dateToTransform) == 1969) ? 99990101 : 
        	10000 * TalendDate.getPartOfDate("YEAR",dateToTransform) 
        	+ 100 * TalendDate.getPartOfDate("MONTH",dateToTransform) + 100
        	+ TalendDate.getPartOfDate("DAY_OF_MONTH",dateToTransform);
    }    
    
    /**
     * dimensionKeyHandling: replaces illegal dimension key values
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} Integer("dimensionKey") input: The dimension key to validate.
     * 
     * {example} dimensionKeyHandling(null) # -1
     */
    public static int dimensionKeyHandling(Integer dimensionKey) {
        return (dimensionKey == null || dimensionKey == 0) ? -1 : dimensionKey;
    }     
    
    /**
     * dateKeyHandling: replaces illegal date key values
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} Integer("dateKey") input: The date key to validate.
     * 
     * {example} dateKeyHandling(null) # 99990101
     */
    public static int dateKeyHandling(Integer dateKey) {
        return (dateKey == null || dateKey == 0) ? 99990101 : dateKey;
    }      
    
    /**
     * currencyConversion: converts value to another currency
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} Float("value") input: The value to convert.
     * {param} Float("rate") input: The conversion rate to use.
     * 
     * {example} currencyConversion(10.0, 1.2) # 12.0
     */
    public static Float currencyConversion(Float value, Float rate) {
        return (value == null || rate == null) ? null : value * rate;
    }     
    
    /**
     * sumValues: sums two values
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} Float("value1") input: The first value to sum.
     * {param} Float("value2") input: The seconds value to sum.
     * 
     * {example} sumValues(10.0, 1.2) # 11.2
     */
    public static Float sumValues(Float value1, Float value2) {
        return (value1 == null && value2 == null) ? null : value1 == null ? value2 : value2 == null ? value1 : value1 + value2;
    }   
    
    /**
     * subtractValues: subtracts two values
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} Float("value1") input: The first value to subtract.
     * {param} Float("value2") input: The seconds value to subtract.
     * 
     * {example} sumValues(10.0, 1.2) # 8.8
     */
    public static Float subtractValues(Float value1, Float value2) {
        return (value1 == null && value2 == null) ? null : value1 == null ? -value2 : value2 == null ? value1 : value1 - value2;
    }      
    
    /**
     * divideValues: divide one value by another
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} Float("numerator") input: The numerator.
     * {param} Float("denominator") input: The denominator.
     * 
     * {example} divideValues(10.0, 2.0) # 5.0
     */
    public static Float divideValues(Float numerator, Float denominator) {
        return (numerator == null || denominator == null) ? null : denominator == 0 ? null : numerator / denominator;
    }       
    
    /**
     * multiplyValues: multiply one value by another
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} Float("value1") input: The first value to multiply.
     * {param} Float("value2") input: The second value to multiply.
     * 
     * {example} multiplyValues(10.0, 2.0) # 20.0
     */
    public static Float multiplyValues(Float value1, Float value2) {
        return (value1 == null || value2 == null) ? null : value1 * value2;
    }       
    
    /**
     * allocateValue: allocate a value based on the fraction of two other values
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} Float("value") input: The value to allocate.
     * {param} Float("numerator") input: The numerator.
     * {param} Float("denominator") input: The denominator.
     * 
     * {example} allocateValue(10.0, 1.0, 2.0) # 5.0
     */
    public static Float allocateValue(Float value, Float numerator, Float denominator) {
        return (value == null || numerator == null || denominator == null) ? null : denominator == 0 ? null : value * (numerator / denominator);
    }      
}
